$date
   Thu Jul 24 18:42:52 2025
$end
$version
  2020.2
$end
$timescale
  1ps
$end
$scope module mv_avg_tb $end
$var reg 1 ! clock $end
$var reg 1 " reset $end
$var reg 1 # sim_reset $end
$var integer 32 $ run_out_of_iq_sample $end
$var integer 32 % iq_count_tmp $end
$var integer 32 & file_data_in $end
$var reg 32 ' data_in [31:0] $end
$var reg 32 ( data_in0 [31:0] $end
$var reg 32 ) data_in1 [31:0] $end
$var reg 1 * data_in_valid $end
$var wire 32 + data_out_new [31:0] $end
$var wire 1 , data_out_new_valid $end
$var wire 32 - data_out0 [31:0] $end
$var wire 32 . data_out1 [31:0] $end
$var wire 1 / data_out_dual_ch_valid $end
$var wire 32 0 data_out128_new [31:0] $end
$var wire 1 1 data_out128_new_valid $end
$var reg 16 2 clk_count [15:0] $end
$var integer 32 3 sample_count $end
$var integer 32 4 data_in_fd $end
$var integer 32 5 data_out_fd $end
$var integer 32 6 data_out_new_fd $end
$var integer 32 7 data_out_dual_ch_fd $end
$var integer 32 8 data_out128_fd $end
$var integer 32 9 data_out128_new_fd $end
$var integer 32 : file_open_trigger $end
$scope module mv_avg_inst $end
$var wire 1 ; clk $end
$var wire 1 < rstn $end
$var wire 32 = data_in [31:0] $end
$var wire 1 > data_in_valid $end
$var wire 32 + data_out [31:0] $end
$var wire 1 , data_out_valid $end
$var reg 37 ? running_total [36:0] $end
$var reg 32 @ data_in_reg [31:0] $end
$var wire 32 A data_in_old [31:0] $end
$var wire 37 B ext_data_in_old [36:0] $end
$var wire 37 C ext_data_in [36:0] $end
$var reg 1 D rd_en $end
$var reg 1 E rd_en_start $end
$var wire 6 F wr_data_count [5:0] $end
$var reg 6 G wr_data_count_reg [5:0] $end
$var wire 1 H wr_complete_pulse $end
$var reg 1 I wr_complete_pulse_reg $end
$var wire 1 J empty $end
$var wire 1 K full $end
$scope module fifo_1clk_for_mv_avg_i $end
$var wire 1 L sleep $end
$var wire 1 M rst $end
$var wire 1 ; wr_clk $end
$var wire 1 > wr_en $end
$var wire 32 = din [31:0] $end
$var wire 1 K full $end
$var wire 1 N prog_full $end
$var wire 6 F wr_data_count [5:0] $end
$var wire 1 O overflow $end
$var wire 1 P wr_rst_busy $end
$var wire 1 Q almost_full $end
$var wire 1 R wr_ack $end
$var wire 1 S rd_en $end
$var wire 32 A dout [31:0] $end
$var wire 1 J empty $end
$var wire 1 T prog_empty $end
$var wire 6 U rd_data_count [5:0] $end
$var wire 1 V underflow $end
$var wire 1 W rd_rst_busy $end
$var wire 1 X almost_empty $end
$var wire 1 Y data_valid $end
$var wire 1 Z injectsbiterr $end
$var wire 1 [ injectdbiterr $end
$var wire 1 \ sbiterr $end
$var wire 1 ] dbiterr $end
$scope begin config_drc_sync $end
$var reg 1 ^ drc_err_flag_sync $end
$upscope $end
$scope module xpm_fifo_base_inst $end
$var wire 1 L sleep $end
$var wire 1 M rst $end
$var wire 1 ; wr_clk $end
$var wire 1 > wr_en $end
$var wire 32 = din [31:0] $end
$var wire 1 K full $end
$var wire 1 _ full_n $end
$var wire 1 N prog_full $end
$var wire 6 F wr_data_count [5:0] $end
$var wire 1 O overflow $end
$var wire 1 P wr_rst_busy $end
$var wire 1 Q almost_full $end
$var wire 1 R wr_ack $end
$var wire 1 ; rd_clk $end
$var wire 1 S rd_en $end
$var wire 32 A dout [31:0] $end
$var wire 1 J empty $end
$var wire 1 T prog_empty $end
$var wire 6 U rd_data_count [5:0] $end
$var wire 1 V underflow $end
$var wire 1 ` rd_rst_busy $end
$var wire 1 X almost_empty $end
$var wire 1 Y data_valid $end
$var wire 1 Z injectsbiterr $end
$var wire 1 [ injectdbiterr $end
$var wire 1 \ sbiterr $end
$var wire 1 ] dbiterr $end
$var reg 2 a curr_fwft_state [1:0] $end
$var reg 2 b next_fwft_state [1:0] $end
$var wire 1 c wrst_busy $end
$var wire 5 d wr_pntr [4:0] $end
$var wire 6 e wr_pntr_ext [5:0] $end
$var wire 5 f wr_pntr_rd_cdc [4:0] $end
$var wire 6 g wr_pntr_rd_cdc_dc [5:0] $end
$var wire 5 h wr_pntr_rd [4:0] $end
$var wire 6 i wr_pntr_rd_dc [5:0] $end
$var wire 5 j rd_pntr_wr_adj [4:0] $end
$var wire 6 k rd_pntr_wr_adj_dc [5:0] $end
$var wire 5 l wr_pntr_plus1 [4:0] $end
$var wire 5 m wr_pntr_plus2 [4:0] $end
$var wire 5 n wr_pntr_plus3 [4:0] $end
$var wire 6 o wr_pntr_plus1_pf [5:0] $end
$var wire 6 p rd_pntr_wr_adj_inv_pf [5:0] $end
$var reg 6 q diff_pntr_pf_q [5:0] $end
$var wire 5 r diff_pntr_pf [4:0] $end
$var wire 5 s rd_pntr [4:0] $end
$var wire 6 t rd_pntr_ext [5:0] $end
$var wire 5 u rd_pntr_wr_cdc [4:0] $end
$var wire 5 v rd_pntr_wr [4:0] $end
$var wire 6 w rd_pntr_wr_cdc_dc [5:0] $end
$var wire 6 x rd_pntr_wr_dc [5:0] $end
$var wire 5 y wr_pntr_rd_adj [4:0] $end
$var wire 6 z wr_pntr_rd_adj_dc [5:0] $end
$var wire 5 { rd_pntr_plus1 [4:0] $end
$var wire 5 | rd_pntr_plus2 [4:0] $end
$var wire 1 } invalid_state $end
$var wire 1 ~ valid_fwft $end
$var wire 1 !! ram_valid_fwft $end
$var wire 1 "! going_empty $end
$var wire 1 #! leaving_empty $end
$var wire 1 $! going_aempty $end
$var wire 1 %! leaving_aempty $end
$var reg 1 &! ram_empty_i $end
$var reg 1 '! ram_aempty_i $end
$var wire 1 (! empty_i $end
$var wire 1 )! going_full $end
$var wire 1 *! leaving_full $end
$var wire 1 +! going_afull $end
$var wire 1 ,! leaving_afull $end
$var reg 1 -! prog_full_i $end
$var reg 1 .! ram_full_i $end
$var reg 1 /! ram_afull_i $end
$var reg 1 0! ram_full_n $end
$var wire 1 1! ram_wr_en_i $end
$var wire 1 2! ram_rd_en_i $end
$var reg 1 3! wr_ack_i $end
$var wire 1 4! rd_en_i $end
$var reg 1 5! rd_en_fwft $end
$var wire 1 6! ram_regce $end
$var wire 1 7! ram_regce_pipe $end
$var wire 32 8! dout_i [31:0] $end
$var reg 1 9! empty_fwft_i $end
$var reg 1 :! aempty_fwft_i $end
$var reg 1 ;! empty_fwft_fb $end
$var reg 1 <! overflow_i $end
$var reg 1 =! underflow_i $end
$var reg 1 >! data_valid_fwft $end
$var reg 1 ?! data_valid_std $end
$var wire 1 @! data_vld_std $end
$var wire 1 A! wrp_gt_rdp_and_red $end
$var wire 1 B! wrp_lt_rdp_and_red $end
$var reg 1 C! ram_wr_en_pf_q $end
$var reg 1 D! ram_rd_en_pf_q $end
$var wire 1 E! ram_wr_en_pf $end
$var wire 1 F! ram_rd_en_pf $end
$var wire 1 G! wr_pntr_plus1_pf_carry $end
$var wire 1 H! rd_pntr_wr_adj_pf_carry $end
$var wire 1 I! write_allow $end
$var wire 1 J! read_allow $end
$var wire 1 K! read_only $end
$var wire 1 L! write_only $end
$var reg 1 M! write_only_q $end
$var reg 1 N! read_only_q $end
$var reg 5 O! diff_pntr_pe_reg1 [4:0] $end
$var reg 5 P! diff_pntr_pe_reg2 [4:0] $end
$var reg 5 Q! diff_pntr_pe [4:0] $end
$var reg 1 R! prog_empty_i $end
$var reg 1 S! ram_empty_i_d1 $end
$var wire 1 T! fe_of_empty $end
$var wire 1 U! wr_en_i $end
$var wire 1 V! wr_rst_i $end
$var wire 1 W! rd_rst_i $end
$var reg 1 X! rd_rst_d2 $end
$var wire 1 Y! rst_d1 $end
$var wire 1 Z! rst_d2 $end
$var wire 1 [! clr_full $end
$var wire 1 \! empty_fwft_d1 $end
$var wire 1 ]! leaving_empty_fwft_fe $end
$var wire 1 ^! leaving_empty_fwft_re $end
$var wire 1 _! le_fwft_re $end
$var wire 1 `! le_fwft_fe $end
$var wire 2 a! extra_words_fwft [1:0] $end
$var wire 1 b! le_fwft_re_wr $end
$var wire 1 c! le_fwft_fe_wr $end
$var wire 1 d! \gen_sdpram.rst_int  $end
$var wire 1 e! \gen_fwft.next_fwft_state_d1  $end
$var reg 1 f! \gen_fwft.ram_regout_en  $end
$var reg 1 g! \gen_fwft.going_empty_fwft  $end
$var reg 1 h! \gen_fwft.leaving_empty_fwft  $end
$var wire 1 i! \gen_fwft.ge_fwft_d1  $end
$var wire 1 j! \gen_fwft.count_up  $end
$var wire 1 k! \gen_fwft.count_down  $end
$var wire 1 l! \gen_fwft.count_en  $end
$var wire 1 m! \gen_fwft.count_rst  $end
$var reg 6 n! \gwdc.wr_data_count_i  [5:0] $end
$var wire 6 o! \gwdc.diff_wr_rd_pntr  [5:0] $end
$var reg 6 p! \grdc.rd_data_count_i  [5:0] $end
$var wire 6 q! \grdc.diff_wr_rd_pntr_rdc  [5:0] $end
$scope begin config_drc $end
$var reg 1 r! drc_err_flag $end
$upscope $end
$scope module xpm_fifo_rst_inst $end
$var wire 1 M rst $end
$var wire 1 ; wr_clk $end
$var wire 1 ; rd_clk $end
$var wire 1 V! wr_rst $end
$var wire 1 W! rd_rst $end
$var wire 1 c wr_rst_busy $end
$var wire 1 ` rd_rst_busy $end
$var reg 2 s! power_on_rst [1:0] $end
$var wire 1 t! rst_i $end
$var reg 3 u! \gen_rst_cc.fifo_wr_rst_cc  [2:0] $end
$upscope $end
$scope module rst_d1_inst $end
$var wire 1 v! rst $end
$var wire 1 ; clk $end
$var wire 1 c d_in $end
$var reg 1 w! d_out $end
$upscope $end
$scope module rst_d2_inst $end
$var wire 1 x! rst $end
$var wire 1 ; clk $end
$var wire 1 Y! d_in $end
$var reg 1 y! d_out $end
$upscope $end
$scope module wrp_inst $end
$var wire 1 c rst $end
$var wire 1 ; clk $end
$var wire 1 1! cnt_en $end
$var wire 1 1! cnt_up $end
$var wire 1 z! cnt_down $end
$var wire 6 e count_value [5:0] $end
$var reg 6 {! count_value_i [5:0] $end
$upscope $end
$scope module wrpp1_inst $end
$var wire 1 c rst $end
$var wire 1 ; clk $end
$var wire 1 1! cnt_en $end
$var wire 1 1! cnt_up $end
$var wire 1 |! cnt_down $end
$var wire 5 l count_value [4:0] $end
$var reg 5 }! count_value_i [4:0] $end
$upscope $end
$scope module wrpp2_inst $end
$var wire 1 c rst $end
$var wire 1 ; clk $end
$var wire 1 1! cnt_en $end
$var wire 1 1! cnt_up $end
$var wire 1 ~! cnt_down $end
$var wire 5 m count_value [4:0] $end
$var reg 5 !" count_value_i [4:0] $end
$upscope $end
$scope module rdp_inst $end
$var wire 1 W! rst $end
$var wire 1 ; clk $end
$var wire 1 2! cnt_en $end
$var wire 1 2! cnt_up $end
$var wire 1 "" cnt_down $end
$var wire 6 t count_value [5:0] $end
$var reg 6 #" count_value_i [5:0] $end
$upscope $end
$scope module rdpp1_inst $end
$var wire 1 W! rst $end
$var wire 1 ; clk $end
$var wire 1 2! cnt_en $end
$var wire 1 2! cnt_up $end
$var wire 1 $" cnt_down $end
$var wire 5 { count_value [4:0] $end
$var reg 5 %" count_value_i [4:0] $end
$upscope $end
$scope module gen_sdpram.xpm_memory_base_inst $end
$var wire 1 L sleep $end
$var wire 1 ; clka $end
$var wire 1 &" rsta $end
$var wire 1 1! ena $end
$var wire 1 '" regcea $end
$var wire 1 1! wea [0:0] $end
$var wire 5 d addra [4:0] $end
$var wire 32 = dina [31:0] $end
$var wire 1 Z injectsbiterra $end
$var wire 1 [ injectdbiterra $end
$var wire 32 (" douta [31:0] $end
$var wire 1 )" sbiterra $end
$var wire 1 *" dbiterra $end
$var wire 1 ; clkb $end
$var wire 1 d! rstb $end
$var wire 1 2! enb $end
$var wire 1 +" regceb $end
$var wire 1 ," web [0:0] $end
$var wire 5 s addrb [4:0] $end
$var wire 32 -" dinb [31:0] $end
$var wire 1 ." injectsbiterrb $end
$var wire 1 /" injectdbiterrb $end
$var wire 32 8! doutb [31:0] $end
$var wire 1 \ sbiterrb $end
$var wire 1 ] dbiterrb $end
$var integer 32 0" num_char_in_param $end
$var wire 32 1" douta_bb [31:0] $end
$var wire 32 2" doutb_bb [31:0] $end
$var wire 1 3" ena_i $end
$var wire 1 4" wea_i [0:0] $end
$var wire 5 5" addra_i [4:0] $end
$var wire 32 6" dina_i [31:0] $end
$var wire 1 7" ena_o_pipe_ctrl $end
$var wire 1 8" regcea_i $end
$var wire 5 9" \gen_wr_a.addra_int  [4:0] $end
$var wire 1 :" enb_i $end
$var wire 1 ;" web_i [0:0] $end
$var wire 5 <" addrb_i [4:0] $end
$var wire 32 =" dinb_i [31:0] $end
$var wire 1 >" enb_o_pipe_ctrl $end
$var wire 1 ?" regceb_i $end
$var wire 1 @" \gen_rd_b.clkb_int  $end
$var wire 5 A" \gen_rd_b.addrb_int  [4:0] $end
$var reg 32 B" \gen_rd_b.doutb_reg  [31:0] $end
$var reg 1 C" \gen_rd_b.sbiterrb_i  $end
$var reg 1 D" \gen_rd_b.dbiterrb_i  $end
$var reg 1 E" sleep_int_a $end
$var reg 1 F" sleep_int_b $end
$var wire 5 G" addra_aslp_sim [4:0] $end
$var wire 5 H" addrb_aslp_sim [4:0] $end
$var wire 1 I" injectsbiterra_sim $end
$var wire 1 J" injectdbiterra_sim $end
$var wire 1 K" injectsbiterrb_sim $end
$var wire 1 L" injectdbiterrb_sim $end
$var reg 1 M" \gen_assert_coll_ww.wra  $end
$var reg 1 N" \gen_assert_coll_ww.wrb  $end
$var reg 1 O" \gen_assert_coll_ww.rda_cap  $end
$var reg 1 P" \gen_assert_coll_ww.rdb_cap  $end
$var reg 1 Q" \gen_assert_coll_ww.wea_cap  [0:0] $end
$var reg 1 R" \gen_assert_coll_ww.web_cap  [0:0] $end
$var reg 5 S" \gen_assert_coll_ww.addra_cap  [4:0] $end
$var reg 5 T" \gen_assert_coll_ww.addra_rd_cap  [4:0] $end
$var reg 5 U" \gen_assert_coll_ww.addrb_cap  [4:0] $end
$var reg 5 V" \gen_assert_coll_ww.addrb_rd_cap  [4:0] $end
$var integer 32 W" \gen_assert_coll_ww.t_half_period_a  $end
$var integer 32 X" \gen_assert_coll_ww.t_half_period_b  $end
$var reg 1 Y" \gen_assert_coll_ww.clk_prd_det_a  $end
$var reg 1 Z" \gen_assert_coll_ww.clk_prd_det_b  $end
$var integer 32 [" \gen_assert_coll_ww.col_win_max  $end
$var reg 1 \" \gen_assert_coll_ww.col_win_wr_a  $end
$var reg 1 ]" \gen_assert_coll_ww.col_win_rd_a  $end
$var reg 1 ^" \gen_assert_coll_ww.col_win_wr_b  $end
$var reg 1 _" \gen_assert_coll_ww.col_win_rd_b  $end
$var reg 1 `" \gen_assert_coll_ww.sync_clk_sym.wr_wr_col  $end
$scope begin config_drc $end
$var reg 1 a" drc_err_flag $end
$upscope $end
$scope begin init_zeroes $end
$var integer 32 b" initword $end
$upscope $end
$scope begin Block2987_24 $end
$var integer 32 c" initstage $end
$scope begin for_pipe_init $end
$upscope $end
$upscope $end
$upscope $end
$scope module gen_fwft.next_state_d1_inst $end
$var wire 1 d" rst $end
$var wire 1 ; clk $end
$var wire 1 e" d_in $end
$var reg 1 f" d_out $end
$upscope $end
$scope module gen_fwft.empty_fwft_d1_inst $end
$var wire 1 g" rst $end
$var wire 1 ; clk $end
$var wire 1 h" d_in $end
$var reg 1 i" d_out $end
$upscope $end
$scope module gen_fwft.ge_fwft_d1_inst $end
$var wire 1 j" rst $end
$var wire 1 ; clk $end
$var wire 1 k" d_in $end
$var reg 1 l" d_out $end
$upscope $end
$scope module gen_fwft.rdpp1_inst $end
$var wire 1 m! rst $end
$var wire 1 ; clk $end
$var wire 1 l! cnt_en $end
$var wire 1 j! cnt_up $end
$var wire 1 k! cnt_down $end
$var wire 2 a! count_value [1:0] $end
$var reg 2 m" count_value_i [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module mv_avg_dual_ch_inst $end
$var wire 1 n" clk $end
$var wire 1 o" rstn $end
$var wire 32 p" data_in0 [31:0] $end
$var wire 32 q" data_in1 [31:0] $end
$var wire 1 r" data_in_valid $end
$var wire 32 - data_out0 [31:0] $end
$var wire 32 . data_out1 [31:0] $end
$var wire 1 / data_out_valid $end
$var reg 36 s" running_total0 [35:0] $end
$var reg 36 t" running_total1 [35:0] $end
$var reg 32 u" data_in0_reg [31:0] $end
$var reg 32 v" data_in1_reg [31:0] $end
$var wire 32 w" data_in_old0 [31:0] $end
$var wire 32 x" data_in_old1 [31:0] $end
$var wire 36 y" ext_data_in_old0 [35:0] $end
$var wire 36 z" ext_data_in0 [35:0] $end
$var wire 36 {" ext_data_in_old1 [35:0] $end
$var wire 36 |" ext_data_in1 [35:0] $end
$var reg 1 }" rd_en $end
$var reg 1 ~" rd_en_start $end
$var wire 5 !# wr_data_count [4:0] $end
$var reg 5 "# wr_data_count_reg [4:0] $end
$var wire 1 ## wr_complete_pulse $end
$var reg 1 $# wr_complete_pulse_reg $end
$var wire 1 %# empty $end
$var wire 1 &# full $end
$scope module fifo_1clk_for_mv_avg_dual_ch_i $end
$var wire 1 '# sleep $end
$var wire 1 (# rst $end
$var wire 1 n" wr_clk $end
$var wire 1 r" wr_en $end
$var wire 64 )# din [63:0] $end
$var wire 1 &# full $end
$var wire 1 *# prog_full $end
$var wire 5 !# wr_data_count [4:0] $end
$var wire 1 +# overflow $end
$var wire 1 ,# wr_rst_busy $end
$var wire 1 -# almost_full $end
$var wire 1 .# wr_ack $end
$var wire 1 /# rd_en $end
$var wire 64 0# dout [63:0] $end
$var wire 1 %# empty $end
$var wire 1 1# prog_empty $end
$var wire 5 2# rd_data_count [4:0] $end
$var wire 1 3# underflow $end
$var wire 1 4# rd_rst_busy $end
$var wire 1 5# almost_empty $end
$var wire 1 6# data_valid $end
$var wire 1 7# injectsbiterr $end
$var wire 1 8# injectdbiterr $end
$var wire 1 9# sbiterr $end
$var wire 1 :# dbiterr $end
$scope begin config_drc_sync $end
$var reg 1 ;# drc_err_flag_sync $end
$upscope $end
$scope module xpm_fifo_base_inst $end
$var wire 1 '# sleep $end
$var wire 1 (# rst $end
$var wire 1 n" wr_clk $end
$var wire 1 r" wr_en $end
$var wire 64 )# din [63:0] $end
$var wire 1 &# full $end
$var wire 1 <# full_n $end
$var wire 1 *# prog_full $end
$var wire 5 !# wr_data_count [4:0] $end
$var wire 1 +# overflow $end
$var wire 1 ,# wr_rst_busy $end
$var wire 1 -# almost_full $end
$var wire 1 .# wr_ack $end
$var wire 1 n" rd_clk $end
$var wire 1 /# rd_en $end
$var wire 64 0# dout [63:0] $end
$var wire 1 %# empty $end
$var wire 1 1# prog_empty $end
$var wire 5 2# rd_data_count [4:0] $end
$var wire 1 3# underflow $end
$var wire 1 =# rd_rst_busy $end
$var wire 1 5# almost_empty $end
$var wire 1 6# data_valid $end
$var wire 1 7# injectsbiterr $end
$var wire 1 8# injectdbiterr $end
$var wire 1 9# sbiterr $end
$var wire 1 :# dbiterr $end
$var reg 2 ># curr_fwft_state [1:0] $end
$var reg 2 ?# next_fwft_state [1:0] $end
$var wire 1 @# wrst_busy $end
$var wire 4 A# wr_pntr [3:0] $end
$var wire 5 B# wr_pntr_ext [4:0] $end
$var wire 4 C# wr_pntr_rd_cdc [3:0] $end
$var wire 5 D# wr_pntr_rd_cdc_dc [4:0] $end
$var wire 4 E# wr_pntr_rd [3:0] $end
$var wire 5 F# wr_pntr_rd_dc [4:0] $end
$var wire 4 G# rd_pntr_wr_adj [3:0] $end
$var wire 5 H# rd_pntr_wr_adj_dc [4:0] $end
$var wire 4 I# wr_pntr_plus1 [3:0] $end
$var wire 4 J# wr_pntr_plus2 [3:0] $end
$var wire 4 K# wr_pntr_plus3 [3:0] $end
$var wire 5 L# wr_pntr_plus1_pf [4:0] $end
$var wire 5 M# rd_pntr_wr_adj_inv_pf [4:0] $end
$var reg 5 N# diff_pntr_pf_q [4:0] $end
$var wire 4 O# diff_pntr_pf [3:0] $end
$var wire 4 P# rd_pntr [3:0] $end
$var wire 5 Q# rd_pntr_ext [4:0] $end
$var wire 4 R# rd_pntr_wr_cdc [3:0] $end
$var wire 4 S# rd_pntr_wr [3:0] $end
$var wire 5 T# rd_pntr_wr_cdc_dc [4:0] $end
$var wire 5 U# rd_pntr_wr_dc [4:0] $end
$var wire 4 V# wr_pntr_rd_adj [3:0] $end
$var wire 5 W# wr_pntr_rd_adj_dc [4:0] $end
$var wire 4 X# rd_pntr_plus1 [3:0] $end
$var wire 4 Y# rd_pntr_plus2 [3:0] $end
$var wire 1 Z# invalid_state $end
$var wire 1 [# valid_fwft $end
$var wire 1 \# ram_valid_fwft $end
$var wire 1 ]# going_empty $end
$var wire 1 ^# leaving_empty $end
$var wire 1 _# going_aempty $end
$var wire 1 `# leaving_aempty $end
$var reg 1 a# ram_empty_i $end
$var reg 1 b# ram_aempty_i $end
$var wire 1 c# empty_i $end
$var wire 1 d# going_full $end
$var wire 1 e# leaving_full $end
$var wire 1 f# going_afull $end
$var wire 1 g# leaving_afull $end
$var reg 1 h# prog_full_i $end
$var reg 1 i# ram_full_i $end
$var reg 1 j# ram_afull_i $end
$var reg 1 k# ram_full_n $end
$var wire 1 l# ram_wr_en_i $end
$var wire 1 m# ram_rd_en_i $end
$var reg 1 n# wr_ack_i $end
$var wire 1 o# rd_en_i $end
$var reg 1 p# rd_en_fwft $end
$var wire 1 q# ram_regce $end
$var wire 1 r# ram_regce_pipe $end
$var wire 64 s# dout_i [63:0] $end
$var reg 1 t# empty_fwft_i $end
$var reg 1 u# aempty_fwft_i $end
$var reg 1 v# empty_fwft_fb $end
$var reg 1 w# overflow_i $end
$var reg 1 x# underflow_i $end
$var reg 1 y# data_valid_fwft $end
$var reg 1 z# data_valid_std $end
$var wire 1 {# data_vld_std $end
$var wire 1 |# wrp_gt_rdp_and_red $end
$var wire 1 }# wrp_lt_rdp_and_red $end
$var reg 1 ~# ram_wr_en_pf_q $end
$var reg 1 !$ ram_rd_en_pf_q $end
$var wire 1 "$ ram_wr_en_pf $end
$var wire 1 #$ ram_rd_en_pf $end
$var wire 1 $$ wr_pntr_plus1_pf_carry $end
$var wire 1 %$ rd_pntr_wr_adj_pf_carry $end
$var wire 1 &$ write_allow $end
$var wire 1 '$ read_allow $end
$var wire 1 ($ read_only $end
$var wire 1 )$ write_only $end
$var reg 1 *$ write_only_q $end
$var reg 1 +$ read_only_q $end
$var reg 4 ,$ diff_pntr_pe_reg1 [3:0] $end
$var reg 4 -$ diff_pntr_pe_reg2 [3:0] $end
$var reg 4 .$ diff_pntr_pe [3:0] $end
$var reg 1 /$ prog_empty_i $end
$var reg 1 0$ ram_empty_i_d1 $end
$var wire 1 1$ fe_of_empty $end
$var wire 1 2$ wr_en_i $end
$var wire 1 3$ wr_rst_i $end
$var wire 1 4$ rd_rst_i $end
$var reg 1 5$ rd_rst_d2 $end
$var wire 1 6$ rst_d1 $end
$var wire 1 7$ rst_d2 $end
$var wire 1 8$ clr_full $end
$var wire 1 9$ empty_fwft_d1 $end
$var wire 1 :$ leaving_empty_fwft_fe $end
$var wire 1 ;$ leaving_empty_fwft_re $end
$var wire 1 <$ le_fwft_re $end
$var wire 1 =$ le_fwft_fe $end
$var wire 2 >$ extra_words_fwft [1:0] $end
$var wire 1 ?$ le_fwft_re_wr $end
$var wire 1 @$ le_fwft_fe_wr $end
$var wire 1 A$ \gen_sdpram.rst_int  $end
$var wire 1 B$ \gen_fwft.next_fwft_state_d1  $end
$var reg 1 C$ \gen_fwft.ram_regout_en  $end
$var reg 1 D$ \gen_fwft.going_empty_fwft  $end
$var reg 1 E$ \gen_fwft.leaving_empty_fwft  $end
$var wire 1 F$ \gen_fwft.ge_fwft_d1  $end
$var wire 1 G$ \gen_fwft.count_up  $end
$var wire 1 H$ \gen_fwft.count_down  $end
$var wire 1 I$ \gen_fwft.count_en  $end
$var wire 1 J$ \gen_fwft.count_rst  $end
$var reg 5 K$ \gwdc.wr_data_count_i  [4:0] $end
$var wire 5 L$ \gwdc.diff_wr_rd_pntr  [4:0] $end
$var reg 5 M$ \grdc.rd_data_count_i  [4:0] $end
$var wire 5 N$ \grdc.diff_wr_rd_pntr_rdc  [4:0] $end
$scope begin config_drc $end
$var reg 1 O$ drc_err_flag $end
$upscope $end
$scope module xpm_fifo_rst_inst $end
$var wire 1 (# rst $end
$var wire 1 n" wr_clk $end
$var wire 1 n" rd_clk $end
$var wire 1 3$ wr_rst $end
$var wire 1 4$ rd_rst $end
$var wire 1 @# wr_rst_busy $end
$var wire 1 =# rd_rst_busy $end
$var reg 2 P$ power_on_rst [1:0] $end
$var wire 1 Q$ rst_i $end
$var reg 3 R$ \gen_rst_cc.fifo_wr_rst_cc  [2:0] $end
$upscope $end
$scope module rst_d1_inst $end
$var wire 1 S$ rst $end
$var wire 1 n" clk $end
$var wire 1 @# d_in $end
$var reg 1 T$ d_out $end
$upscope $end
$scope module rst_d2_inst $end
$var wire 1 U$ rst $end
$var wire 1 n" clk $end
$var wire 1 6$ d_in $end
$var reg 1 V$ d_out $end
$upscope $end
$scope module wrp_inst $end
$var wire 1 @# rst $end
$var wire 1 n" clk $end
$var wire 1 l# cnt_en $end
$var wire 1 l# cnt_up $end
$var wire 1 W$ cnt_down $end
$var wire 5 B# count_value [4:0] $end
$var reg 5 X$ count_value_i [4:0] $end
$upscope $end
$scope module wrpp1_inst $end
$var wire 1 @# rst $end
$var wire 1 n" clk $end
$var wire 1 l# cnt_en $end
$var wire 1 l# cnt_up $end
$var wire 1 Y$ cnt_down $end
$var wire 4 I# count_value [3:0] $end
$var reg 4 Z$ count_value_i [3:0] $end
$upscope $end
$scope module wrpp2_inst $end
$var wire 1 @# rst $end
$var wire 1 n" clk $end
$var wire 1 l# cnt_en $end
$var wire 1 l# cnt_up $end
$var wire 1 [$ cnt_down $end
$var wire 4 J# count_value [3:0] $end
$var reg 4 \$ count_value_i [3:0] $end
$upscope $end
$scope module rdp_inst $end
$var wire 1 4$ rst $end
$var wire 1 n" clk $end
$var wire 1 m# cnt_en $end
$var wire 1 m# cnt_up $end
$var wire 1 ]$ cnt_down $end
$var wire 5 Q# count_value [4:0] $end
$var reg 5 ^$ count_value_i [4:0] $end
$upscope $end
$scope module rdpp1_inst $end
$var wire 1 4$ rst $end
$var wire 1 n" clk $end
$var wire 1 m# cnt_en $end
$var wire 1 m# cnt_up $end
$var wire 1 _$ cnt_down $end
$var wire 4 X# count_value [3:0] $end
$var reg 4 `$ count_value_i [3:0] $end
$upscope $end
$scope module gen_sdpram.xpm_memory_base_inst $end
$var wire 1 '# sleep $end
$var wire 1 n" clka $end
$var wire 1 a$ rsta $end
$var wire 1 l# ena $end
$var wire 1 b$ regcea $end
$var wire 1 l# wea [0:0] $end
$var wire 4 A# addra [3:0] $end
$var wire 64 )# dina [63:0] $end
$var wire 1 7# injectsbiterra $end
$var wire 1 8# injectdbiterra $end
$var wire 64 c$ douta [63:0] $end
$var wire 1 d$ sbiterra $end
$var wire 1 e$ dbiterra $end
$var wire 1 n" clkb $end
$var wire 1 A$ rstb $end
$var wire 1 m# enb $end
$var wire 1 f$ regceb $end
$var wire 1 g$ web [0:0] $end
$var wire 4 P# addrb [3:0] $end
$var wire 64 h$ dinb [63:0] $end
$var wire 1 i$ injectsbiterrb $end
$var wire 1 j$ injectdbiterrb $end
$var wire 64 s# doutb [63:0] $end
$var wire 1 9# sbiterrb $end
$var wire 1 :# dbiterrb $end
$var integer 32 k$ num_char_in_param $end
$var wire 64 l$ douta_bb [63:0] $end
$var wire 64 m$ doutb_bb [63:0] $end
$var wire 1 n$ ena_i $end
$var wire 1 o$ wea_i [0:0] $end
$var wire 4 p$ addra_i [3:0] $end
$var wire 64 q$ dina_i [63:0] $end
$var wire 1 r$ ena_o_pipe_ctrl $end
$var wire 1 s$ regcea_i $end
$var wire 4 t$ \gen_wr_a.addra_int  [3:0] $end
$var wire 1 u$ enb_i $end
$var wire 1 v$ web_i [0:0] $end
$var wire 4 w$ addrb_i [3:0] $end
$var wire 64 x$ dinb_i [63:0] $end
$var wire 1 y$ enb_o_pipe_ctrl $end
$var wire 1 z$ regceb_i $end
$var wire 1 {$ \gen_rd_b.clkb_int  $end
$var wire 4 |$ \gen_rd_b.addrb_int  [3:0] $end
$var reg 64 }$ \gen_rd_b.doutb_reg  [63:0] $end
$var reg 1 ~$ \gen_rd_b.sbiterrb_i  $end
$var reg 1 !% \gen_rd_b.dbiterrb_i  $end
$var reg 1 "% sleep_int_a $end
$var reg 1 #% sleep_int_b $end
$var wire 4 $% addra_aslp_sim [3:0] $end
$var wire 4 %% addrb_aslp_sim [3:0] $end
$var wire 1 &% injectsbiterra_sim $end
$var wire 1 '% injectdbiterra_sim $end
$var wire 1 (% injectsbiterrb_sim $end
$var wire 1 )% injectdbiterrb_sim $end
$var reg 1 *% \gen_assert_coll_ww.wra  $end
$var reg 1 +% \gen_assert_coll_ww.wrb  $end
$var reg 1 ,% \gen_assert_coll_ww.rda_cap  $end
$var reg 1 -% \gen_assert_coll_ww.rdb_cap  $end
$var reg 1 .% \gen_assert_coll_ww.wea_cap  [0:0] $end
$var reg 1 /% \gen_assert_coll_ww.web_cap  [0:0] $end
$var reg 4 0% \gen_assert_coll_ww.addra_cap  [3:0] $end
$var reg 4 1% \gen_assert_coll_ww.addra_rd_cap  [3:0] $end
$var reg 4 2% \gen_assert_coll_ww.addrb_cap  [3:0] $end
$var reg 4 3% \gen_assert_coll_ww.addrb_rd_cap  [3:0] $end
$var integer 32 4% \gen_assert_coll_ww.t_half_period_a  $end
$var integer 32 5% \gen_assert_coll_ww.t_half_period_b  $end
$var reg 1 6% \gen_assert_coll_ww.clk_prd_det_a  $end
$var reg 1 7% \gen_assert_coll_ww.clk_prd_det_b  $end
$var integer 32 8% \gen_assert_coll_ww.col_win_max  $end
$var reg 1 9% \gen_assert_coll_ww.col_win_wr_a  $end
$var reg 1 :% \gen_assert_coll_ww.col_win_rd_a  $end
$var reg 1 ;% \gen_assert_coll_ww.col_win_wr_b  $end
$var reg 1 <% \gen_assert_coll_ww.col_win_rd_b  $end
$var reg 1 =% \gen_assert_coll_ww.sync_clk_sym.wr_wr_col  $end
$scope begin config_drc $end
$var reg 1 >% drc_err_flag $end
$upscope $end
$scope begin init_zeroes $end
$var integer 32 ?% initword $end
$upscope $end
$scope begin Block2987_76 $end
$var integer 32 @% initstage $end
$scope begin for_pipe_init $end
$upscope $end
$upscope $end
$upscope $end
$scope module gen_fwft.next_state_d1_inst $end
$var wire 1 A% rst $end
$var wire 1 n" clk $end
$var wire 1 B% d_in $end
$var reg 1 C% d_out $end
$upscope $end
$scope module gen_fwft.empty_fwft_d1_inst $end
$var wire 1 D% rst $end
$var wire 1 n" clk $end
$var wire 1 E% d_in $end
$var reg 1 F% d_out $end
$upscope $end
$scope module gen_fwft.ge_fwft_d1_inst $end
$var wire 1 G% rst $end
$var wire 1 n" clk $end
$var wire 1 H% d_in $end
$var reg 1 I% d_out $end
$upscope $end
$scope module gen_fwft.rdpp1_inst $end
$var wire 1 J$ rst $end
$var wire 1 n" clk $end
$var wire 1 I$ cnt_en $end
$var wire 1 G$ cnt_up $end
$var wire 1 H$ cnt_down $end
$var wire 2 >$ count_value [1:0] $end
$var reg 2 J% count_value_i [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
0!!
b10 !"
bx !#
0!$
0!%
1"
0"!
0""
bx "#
x"$
0"%
1#
x#!
b0 #"
x##
0#$
0#%
b0 $
0$!
0$"
x$#
z$$
b0 $%
bx %
0%!
b1 %"
1%#
z%$
b0 %%
bx &
1&!
0&"
0&#
x&$
z&%
bx '
1'!
0'"
z'#
0'$
z'%
bx (
1(!
b0 ("
1(#
0($
0(%
bx )
0)!
0)"
bx )#
x)$
0)%
x*
0*!
0*"
0*#
x*$
0*%
bx +
0+!
x+"
0+#
x+$
0+%
x,
0,!
0,"
0,#
bx ,$
0,%
bx -
0-!
b0 -"
0-#
bx -$
0-%
bx .
0.!
0."
0.#
b0 .$
0.%
x/
0/!
0/"
x/#
1/$
0/%
bz 0
10!
b0 0"
b0 0#
10$
b0 0%
z1
x1!
bz 1"
01#
z1$
b0 1%
bx 2
02!
bz 2"
bx 2#
z2$
b0 2%
bx 3
03!
x3"
03#
03$
b0 3%
bx 4
x4!
x4"
04#
04$
b101110111000 4%
bx 5
x5!
b0 5"
05#
05$
b101110111000 5%
bx 6
x6!
bx 6"
06#
06$
06%
bx 7
07!
x7"
z7#
07$
07%
bx 8
b0 8!
08"
z8#
08$
b101110111000 8%
bx 9
19!
b0 9"
09#
09$
09%
b0 :
1:!
0:"
0:#
z:$
0:%
0;
1;!
0;"
0;#
z;$
0;%
0<
0<!
b0 <"
1<#
z<$
0<%
bx =
0=!
b0 ="
0=#
z=$
0=%
x>
0>!
0>"
b0 >#
b0 >$
0>%
bx ?
0?!
x?"
bx ?#
z?$
b10000 ?%
bx @
z@!
0@"
0@#
z@$
b1 @%
b0 A
zA!
b0 A"
b0 A#
0A$
0A%
b0 B
zB!
b0 B"
b0 B#
0B$
xB%
bx C
0C!
0C"
bz C#
xC$
0C%
xD
0D!
0D"
bz D#
xD$
0D%
xE
xE!
0E"
b0 E#
xE$
xE%
bx F
0F!
0F"
b0 F#
0F$
0F%
bx G
zG!
b0 G"
b0 G#
xG$
0G%
xH
zH!
b0 H"
b0 H#
0H$
xH%
xI
xI!
zI"
b1 I#
xI$
0I%
1J
0J!
zJ"
b10 J#
xJ$
b0 J%
0K
0K!
0K"
bz K#
bx K$
zL
xL!
0L"
bz L#
b0 L$
1M
xM!
0M"
bz M#
bx M$
0N
xN!
0N"
b0 N#
b0 N$
0O
bx O!
0O"
bz O#
0O$
0P
bx P!
0P"
b0 P#
b11 P$
0Q
b0 Q!
0Q"
b0 Q#
1Q$
0R
1R!
0R"
bz R#
b0 R$
xS
1S!
b0 S"
b0 S#
0S$
0T
zT!
b0 T"
bz T#
0T$
bx U
zU!
b0 U"
b0 U#
0U$
0V
0V!
b0 V"
b0 V#
0V$
0W
0W!
b101110111000 W"
b0 W#
0W$
0X
0X!
b101110111000 X"
b1 X#
b0 X$
0Y
0Y!
0Y"
bz Y#
0Y$
zZ
0Z!
0Z"
1Z#
b1 Z$
z[
0[!
b101110111000 ["
0[#
0[$
0\
0\!
0\"
0\#
b10 \$
0]
z]!
0]"
0]#
0]$
0^
z^!
0^"
x^#
b0 ^$
1_
z_!
0_"
0_#
0_$
0`
z`!
0`"
0`#
b1 `$
b0 a
b0 a!
0a"
1a#
0a$
bx b
zb!
b100000 b"
1b#
0b$
0c
zc!
b1 c"
1c#
b0 c$
b0 d
0d!
0d"
0d#
0d$
b0 e
0e!
xe"
0e#
0e$
bz f
xf!
0f"
0f#
xf$
bz g
xg!
0g"
0g#
0g$
b0 h
xh!
xh"
0h#
b0 h$
b0 i
0i!
0i"
0i#
0i$
b0 j
xj!
0j"
0j#
0j$
b0 k
0k!
xk"
1k#
b0 k$
b1 l
xl!
0l"
xl#
bz l$
b10 m
xm!
b0 m"
0m#
bz m$
bz n
bx n!
0n"
0n#
xn$
bz o
b0 o!
0o"
xo#
xo$
bz p
bx p!
bx p"
xp#
b0 p$
b0 q
b0 q!
bx q"
xq#
bx q$
bz r
0r!
xr"
0r#
xr$
b0 s
b11 s!
bx s"
b0 s#
0s$
b0 t
1t!
bx t"
1t#
b0 t$
bz u
b0 u!
bx u"
1u#
0u$
b0 v
0v!
bx v"
1v#
0v$
bz w
0w!
b0 w"
0w#
b0 w$
b0 x
0x!
b0 x"
0x#
b0 x$
b0 y
0y!
b0 y"
0y#
0y$
b0 z
0z!
bx z"
0z#
xz$
b1 {
b0 {!
b0 {"
z{#
0{$
bz |
0|!
bx |"
z|#
b0 |$
1}
b1 }!
x}"
z}#
b0 }$
0~
0~!
x~"
0~#
0~$
$end
#5000
1!
x!!
b0 !#
0"!
b0 "#
0"$
0#!
0##
0#$
0$!
0$#
0%!
x%#
x&!
0&$
b0 '
0'$
b0 (
x(!
0($
b0 )
0)!
b0 )#
0)$
0*
0*!
b0 +
0+!
0+"
0,
0,!
1,#
b0 -
b0 .
0.!
0/
0/#
10!
01!
b0 2
02!
b0 2#
03"
13$
04!
04"
14#
14$
b1001110001000 4%
05!
b1001110001000 5%
06!
b0 6"
07"
08$
b101110111000 8%
x9!
x9$
b0 :
0:"
1;
x;!
b0 =
b0 ="
1=#
0=%
0>
0>"
bx >#
b0 ?
0?"
b0 ?#
b0 @
1@"
1@#
1A$
xB$
0B%
b0 C
0C$
xC%
0D
0D$
0E
0E!
0E$
0E%
b0 F
0F!
xF$
xF%
b0 G
0G$
0H
xH$
0H%
0I
0I!
xI$
xI%
xJ
0J!
1J$
0K!
b0 K$
0L!
b0 M$
1P
b10 P$
b111 R$
0S
0T$
b0 U
1V!
0V$
1W
1W!
b1001110001000 W"
b1001110001000 X"
xZ#
0[!
b101110111000 ["
x[#
x\!
x\#
0]#
0^#
0_#
1`
0`"
0`#
bx a
xa#
b0 b
1c
xc#
1d!
0d#
xe!
0e"
0e#
0f!
xf"
0f#
0f$
0g!
0g#
0h!
0h"
xi!
xi"
0i#
0j!
xk!
0k"
1k#
xl!
xl"
0l#
1m!
0m#
b0 n!
1n"
0n$
0o#
0o$
b0 p!
b0 p"
0p#
b0 q"
0q#
b0 q$
0r"
0r$
b10 s!
b0 s"
b0 t"
xt#
b111 u!
b0 u"
0u$
b0 v"
xv#
0w!
b0 x$
0y!
0y$
b0 z"
0z$
1{$
b0 |"
x}
0}"
x~
0~"
#10000
0!
0#
b1001110001000 4%
b1001110001000 5%
16%
17%
b101110111000 8%
0;
0@"
b1001110001000 W"
b1001110001000 X"
1Y"
1Z"
b101110111000 ["
0n"
0{$
#15000
1!
0!!
b10 !"
b0 "#
b0 #"
0$#
b1 %"
1%#
1&!
b0 '
0'$
b11111111111111111111111110011100 (
1(!
b0 )
b11111111111111111111111110011100 )#
0*
1,#
0.!
10!
01!
b1 2
02!
b0 4
b0 6
16$
b0 7
08$
19!
09$
b1 :
1;
1;!
0=%
b0 >#
b0 ?
b0 ?#
b0 @
1@"
0B$
0C%
0D
0E
0F$
0F%
b0 G
0G$
0H$
0I
0I$
0I%
1J
0J!
1J$
b0 J%
b0 K$
b0 M$
1P
b0 P$
1Q$
b111 R$
1T$
0V$
b0 X$
1Y!
1Z#
b1 Z$
0[!
0[#
0\!
0\#
b10 \$
b0 ^$
b1 `$
b0 a
1a#
b0 b
1c#
0e!
0f"
0i!
0i"
0i#
0j!
0k!
1k#
0l!
0l"
0l#
1m!
b0 m"
0m#
b0 n!
1n"
b0 p!
b11111111111111111111111110011100 p"
b11111111111111111111111110011100 q$
b0 s!
b0 s"
1t!
b0 t"
1t#
b111 u!
b0 u"
b0 v"
1v#
1w!
b0 x$
0y!
b0 {!
1{$
1}
b1 }!
0}"
0~
0~"
#20000
0!
0;
0@"
0n"
0{$
#25000
1!
b10 !"
b0 "#
b0 #"
0$#
b1 %"
1&!
b0 '
b11111111111111111111111100111000 (
b0 )
b11111111111111111111111100111000 )#
0*
0.!
10!
b10 2
17$
19!
b10 :
1;
1;!
0=%
b0 >#
b0 ?
b0 @
1@"
0C%
0D
0E
0F%
b0 G
0I
0I%
b0 J%
b0 K$
b0 M$
b0 P$
b111 R$
1T$
1V$
b0 X$
1Z!
b1 Z$
b10 \$
b0 ^$
b1 `$
b0 a
1a#
0f"
0i"
0i#
1k#
0l"
b0 m"
b0 n!
1n"
b0 p!
b11111111111111111111111100111000 p"
b11111111111111111111111100111000 q$
b0 s!
b0 s"
b0 t"
1t#
b111 u!
b0 u"
b0 v"
1v#
1w!
b0 x$
1y!
b0 {!
1{$
b1 }!
0}"
0~"
#30000
0!
0;
0@"
0n"
0{$
#35000
1!
b10 !"
b0 "#
b0 #"
0$#
b1 %"
1&!
b0 '
b11111111111111111111111011010100 (
b0 )
b11111111111111111111111011010100 )#
0*
0.!
10!
b11 2
19!
b11 :
1;
1;!
0=%
b0 >#
b0 ?
b0 @
1@"
0C%
0D
0E
0F%
b0 G
0I
0I%
b0 J%
b0 K$
b0 M$
b0 P$
b111 R$
1T$
1V$
b0 X$
b1 Z$
b10 \$
b0 ^$
b1 `$
b0 a
1a#
0f"
0i"
0i#
1k#
0l"
b0 m"
b0 n!
1n"
b0 p!
b11111111111111111111111011010100 p"
b11111111111111111111111011010100 q$
b0 s!
b0 s"
b0 t"
1t#
b111 u!
b0 u"
b0 v"
1v#
1w!
b0 x$
1y!
b0 {!
1{$
b1 }!
0}"
0~"
#40000
0!
0;
0@"
0n"
0{$
#45000
1!
b10 !"
b0 "#
b0 #"
0$#
b1 %"
1&!
b0 '
b11111111111111111111111001110000 (
b0 )
b11111111111111111111111001110000 )#
0*
0.!
10!
b100 2
19!
b100 :
1;
1;!
0=%
b0 >#
b0 ?
b0 @
1@"
0C%
0D
0E
0F%
b0 G
0I
0I%
b0 J%
b0 K$
b0 M$
b0 P$
b111 R$
1T$
1V$
b0 X$
b1 Z$
b10 \$
b0 ^$
b1 `$
b0 a
1a#
0f"
0i"
0i#
1k#
0l"
b0 m"
b0 n!
1n"
b0 p!
b11111111111111111111111001110000 p"
b11111111111111111111111001110000 q$
b0 s!
b0 s"
b0 t"
1t#
b111 u!
b0 u"
b0 v"
1v#
1w!
b0 x$
1y!
b0 {!
1{$
b1 }!
0}"
0~"
#50000
0!
0;
0@"
0n"
0{$
#55000
1!
b10 !"
b0 "#
b0 #"
b1 $
0$#
b11111111111111111111111111111111 %
b1 %"
1&!
bx '
bx (
bx )
bx )#
1*
0.!
10!
01!
b0 2
bx 6"
19!
b101 :
1;
1;!
bx =
b0 ="
0=%
1>
b0 >#
b0 ?
b0 @
1@"
0C%
0D
0E
0F%
b0 G
0I
0I%
b0 J%
b0 K$
b0 M$
b0 P$
b111 R$
1T$
1V$
b0 X$
b1 Z$
b10 \$
b0 ^$
0`"
b1 `$
b0 a
1a#
0f"
0i"
0i#
1k#
0l"
0l#
b0 m"
b0 n!
1n"
b0 p!
bx p"
bx q"
bx q$
1r"
b0 s!
b0 s"
b0 t"
1t#
b111 u!
b0 u"
b0 v"
1v#
1w!
b0 x$
1y!
b0 {!
1{$
b1 }!
0}"
0~"
#60000
0!
0;
0@"
0n"
0{$
#65000
1!
b110 :
1;
1@"
1n"
1{$
